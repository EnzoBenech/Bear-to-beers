//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Character/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""APied"",
            ""id"": ""f70ec761-a3fe-435a-87ff-2e6663e74142"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""Value"",
                    ""id"": ""9b1a4809-1568-4fb9-93bb-87b7f3764b79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ff8392f0-dbe9-48e7-8763-f43a96aecbdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dce3e9c0-175f-44fe-ba21-86f806e44f89"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""857118c3-9f23-4355-915e-f869788e4326"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""86a3da47-d97b-4fb5-87ec-f6684a1a193b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2036898b-5604-4da6-ba7c-e177d3645617"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""0e6ecf5b-15ea-428f-b860-405ef934a8a7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""826a8425-55e4-47db-a1c2-3ed000595ad6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e78e9c25-9d75-4edc-924e-78f4dc3a9ce6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13192766-2afc-4d4d-909d-1393fb987648"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // APied
        m_APied = asset.FindActionMap("APied", throwIfNotFound: true);
        m_APied_Mouvement = m_APied.FindAction("Mouvement", throwIfNotFound: true);
        m_APied_Jump = m_APied.FindAction("Jump", throwIfNotFound: true);
        m_APied_Look = m_APied.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // APied
    private readonly InputActionMap m_APied;
    private IAPiedActions m_APiedActionsCallbackInterface;
    private readonly InputAction m_APied_Mouvement;
    private readonly InputAction m_APied_Jump;
    private readonly InputAction m_APied_Look;
    public struct APiedActions
    {
        private @PlayerInput m_Wrapper;
        public APiedActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_APied_Mouvement;
        public InputAction @Jump => m_Wrapper.m_APied_Jump;
        public InputAction @Look => m_Wrapper.m_APied_Look;
        public InputActionMap Get() { return m_Wrapper.m_APied; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(APiedActions set) { return set.Get(); }
        public void SetCallbacks(IAPiedActions instance)
        {
            if (m_Wrapper.m_APiedActionsCallbackInterface != null)
            {
                @Mouvement.started -= m_Wrapper.m_APiedActionsCallbackInterface.OnMouvement;
                @Mouvement.performed -= m_Wrapper.m_APiedActionsCallbackInterface.OnMouvement;
                @Mouvement.canceled -= m_Wrapper.m_APiedActionsCallbackInterface.OnMouvement;
                @Jump.started -= m_Wrapper.m_APiedActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_APiedActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_APiedActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_APiedActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_APiedActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_APiedActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_APiedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouvement.started += instance.OnMouvement;
                @Mouvement.performed += instance.OnMouvement;
                @Mouvement.canceled += instance.OnMouvement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public APiedActions @APied => new APiedActions(this);
    public interface IAPiedActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
